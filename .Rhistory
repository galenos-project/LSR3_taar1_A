RoB$suffix <- suffix_list
# Add the suffix to the original column
RoB$StudyId <- paste(RoB$StudyId, RoB$suffix, sep = "")
# Remove the 'suffix' column if you no longer need it
RoB <- select(RoB, -suffix)
RoB <- RoB[order(RoB$StudyId),]
RoB <- RoB[,c(5,2,3,1)]
View(tab2)
df_S <- filter(df, SortLabel == "TvC")
df_S_LMA <- filter_experiment_outcome_type(df, "TvC", "Locomotor activity")
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
df_S <- filter(df, SortLabel == "TvC")
df_S_LMA <- filter_experiment_outcome_type(df, "TvC", "Locomotor activity")
df_S_PPI <- filter_experiment_outcome_type(df, "TvC", "Prepulse inhibition")
df_S_cog <- filter_experiment_outcome_type(df, "TvC", "Cognition")
df_S_social <- filter_experiment_outcome_type(df, "TvC", "Social interaction")
df_S_stereo <- filter_experiment_outcome_type(df, "TvC", "Stereotypy")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
names(df)
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
?rob_traffic_light
df <- df %>%
filter(SortLabel == experiment_type) %>%
filter(OutcomeType == outcome)
df <- df %>%
#filter(SortLabel == experiment_type) %>%
filter(OutcomeType == outcome)
RoB <- unique(df[,c(75, 83, 95:106)])
View(RoB)
names(df)
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
RoB <- unique(df[,c(75, 77, 83, 95:106)])
#change studyId to Author, year
RoB$StudyId <- toupper(paste0(str_extract(RoB$Authors,"\\b\\w+\\b"),', ',RoB$Year))
# Assuming your data frame is named RoB and the column is named StudyId
unique_study_ids <- unique(RoB$StudyId)
suffix_list <- character(length = nrow(RoB))
for (study_id in unique_study_ids) {
indices <- RoB$StudyId == study_id
if (sum(indices) > 1) {
suffix_list[indices] <- letters[seq_along(suffix_list[indices])]
}
}
RoB$suffix <- suffix_list
# Add the suffix to the original column
RoB$StudyId <- paste(RoB$StudyId, RoB$suffix, sep = "")
# Remove the 'suffix' column if you no longer need it
RoB <- select(RoB, -suffix)
RoB <- RoB[order(RoB$StudyId),]
#extract Syrcle RoB scores
SyRCLE <- RoB[,3:14]
#Change "yes' to 'low' and 'No' to 'high'
SyRCLE <- mutate_all(SyRCLE, list(~ ifelse(. == 'Yes', 'Low', .)))
SyRCLE <- mutate_all(SyRCLE, list(~ ifelse(. == 'No', 'High', .)))
colnames(SyRCLE) <- c('Study','Allocation sequence','Baseline similarity','Concealment of allocation sequence','Random housing','Caregivers blinded','Random selection for outcome assessment','Blinded outcome assessor','Incomplete data reporting addressed','Free from selective outcome reporting','Free of other risks of bias')
RoB_TL <- rob_traffic_light(data <- SyRCLE, tool = "Generic", psize = 6)
RoB_TL <- rob_traffic_light(data = SyRCLE, tool = "Generic", psize = 6)
RoB_TL <- rob_traffic_light(data = SyRCLE, tool = "Generic", psize = 6)
# Check if SyRCLE exists and view its structure
if (exists("SyRCLE")) {
print(head(SyRCLE))
print(str(SyRCLE))
} else {
print("SyRCLE is not defined.")
}
install.packages("robvis")
library(robvis)
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
install.packages("robvis")
library(robvis)
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
### libraries
library(ggplot2)
library(devtools)
library(dosresmeta)
library(dplyr)
library(grid)
library(gtools)
library(kableExtra)
library(graphics)
library(patchwork)
library(forcats)
library(knitr)
library(ggplot2)
library(Matrix)
library(meta)
library(metafor)
# rm(list = ls())
# devtools::install_github("daniel1noble/orchaRd", ref = "main", force = TRUE) # install orchaRd
# pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, orchaRd, emmeans, ape, phytools, flextable)
library(orchaRd)
library(readxl)
library(readr)
library(rje)
library(rms)
library(stringr)
library(tibble)
library(tidyr)
library(tools)
library(rlang)
#devtools::install_github("mcguinlu/robvis")
#install_github("mcguinlu/robvis")
library(robvis)
library(PRISMA2020)
library(grateful)
library(xtable)
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
exists("trafficlightplot", where = asNamespace("robvis"), inherits = FALSE)
rob_traffic_light <-
function(data,
tool,
colour = "cochrane",
psize = 10,
overall = TRUE,
...) {
check_tool(tool)
check_first_row(data)
colour <- clean_colour_spelling(colour)
check_colour(tool = tool, colour = colour)
# Define colours
rob_colours <- get_colour(tool = tool, colour = colour)
if (tool == "ROB2") {
plot <- rob_traffic_light_rob2(
data = data,
tool = tool,
rob_colours = rob_colours,
psize = psize,
overall = overall
)
}
if (tool == "ROB2-Cluster") {
plot <- rob_traffic_light_rob2_cluster(
data = data,
tool = tool,
rob_colours = rob_colours,
psize = psize,
overall = overall
)
}
if (tool == "ROBINS-I") {
plot <- rob_traffic_light_robinsi(
data = data,
tool = tool,
rob_colours = rob_colours,
psize = psize,
overall = overall
)
}
if (tool == "ROBINS-E") {
plot <- rob_traffic_light_robinse(
data = data,
tool = tool,
rob_colours = rob_colours,
psize = psize,
overall = overall
)
}
if (tool == "QUADAS-2") {
plot <- rob_traffic_light_quadas2(
data = data,
tool = tool,
rob_colours = rob_colours,
psize = psize,
overall = overall
)
}
if (tool == "QUIPS") {
plot <- rob_traffic_light_quips(
data = data,
tool = tool,
rob_colours = rob_colours,
psize = psize,
overall = overall
)
}
if (tool %in% c("Generic", "ROB1")) {
plot <- rob_traffic_light_generic(
data = data,
tool = tool,
rob_colours = rob_colours,
psize = psize,
overall = overall,
...
)
}
# Add recommended saving height to the plot object
plot$rec_height <- get_height(
data = data,
tool = tool,
psize = psize,
type = "tf"
)
# Add recommended saving width to the plot object
plot$rec_width <- get_width(data = data,
psize = psize,
type = "tf")
plot$rob_type <- "traffic"
return(plot)
}
RoB_TL <- rob_traffic_light(data = SyRCLE, tool = "Generic", psize = 6)
names(SyRCLE)
RoB <- unique(df[,c(75, 77, 83, 95:106)])
RoB
#change studyId to Author, year
RoB$StudyId <- toupper(paste0(str_extract(RoB$Authors,"\\b\\w+\\b"),', ',RoB$Year))
# Assuming your data frame is named RoB and the column is named StudyId
unique_study_ids <- unique(RoB$StudyId)
suffix_list <- character(length = nrow(RoB))
for (study_id in unique_study_ids) {
indices <- RoB$StudyId == study_id
if (sum(indices) > 1) {
suffix_list[indices] <- letters[seq_along(suffix_list[indices])]
}
}
RoB$suffix <- suffix_list
# Add the suffix to the original column
RoB$StudyId <- paste(RoB$StudyId, RoB$suffix, sep = "")
# Remove the 'suffix' column if you no longer need it
RoB <- select(RoB, -suffix)
RoB <- RoB[order(RoB$StudyId),]
RoB
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
Error in `contrasts<-`(`*tmp*`, value = contr) :
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
### libraries
library(ggplot2)
library(devtools)
library(dosresmeta)
library(dplyr)
library(grid)
library(gtools)
library(kableExtra)
library(graphics)
library(patchwork)
library(forcats)
library(knitr)
library(ggplot2)
library(Matrix)
library(meta)
library(metafor)
# rm(list = ls())
# devtools::install_github("daniel1noble/orchaRd", ref = "main", force = TRUE) # install orchaRd
# pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, orchaRd, emmeans, ape, phytools, flextable)
library(orchaRd)
library(readxl)
library(readr)
library(rje)
library(rms)
library(stringr)
library(tibble)
library(tidyr)
library(tools)
library(rlang)
#devtools::install_github("mcguinlu/robvis")
#install_github("mcguinlu/robvis")
library(robvis)
library(PRISMA2020)
library(grateful)
library(xtable)
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
### libraries
library(ggplot2)
library(devtools)
library(dosresmeta)
library(dplyr)
library(grid)
library(gtools)
library(kableExtra)
library(graphics)
library(patchwork)
library(forcats)
library(knitr)
library(ggplot2)
library(Matrix)
library(meta)
library(metafor)
# rm(list = ls())
# devtools::install_github("daniel1noble/orchaRd", ref = "main", force = TRUE) # install orchaRd
# pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, orchaRd, emmeans, ape, phytools, flextable)
library(orchaRd)
library(readxl)
library(readr)
library(rje)
library(rms)
library(stringr)
library(tibble)
library(tidyr)
library(tools)
library(rlang)
#devtools::install_github("mcguinlu/robvis")
#install_github("mcguinlu/robvis")
library(robvis)
library(PRISMA2020)
library(grateful)
library(xtable)
#define LSR
LSR <- 'LSR3'
# define date of processing
DoP <- Sys.Date()
# All function needed to run this notebook (analyses, etc.) should be in a util.R file
source("util_u2/util.R")
# obtain the data and prepare them for analysis - all data cleaning routines should be in this .R script
source("wrangling_u2/wrangling_functions.R", local = TRUE)
source("wrangling_u2/data_wrangle_script.R")
# Retrieve article metadata omitted from 'clean_data.csv' and join
article_metadata <- df %>%
select(StudyId, Title, Year) %>%
distinct()
prisma_data <- read_csv("data_u2/LSR3_prisma_180325.csv")
dfp <- PRISMA_data(prisma_data)
PRISMA_flowdiagram(dfp, interactive=FALSE, previous=TRUE, other=FALSE,
detail_databases=FALSE, detail_registers=FALSE, fontsize=12, font="Helvetica",
title_colour="Goldenrod1", greybox_colour="Gainsboro", main_colour="Black",
arrow_colour="Black", arrow_head="normal", arrow_tail="none", side_boxes=TRUE )
RoB <- df %>% select(StudyId, Authors, Year) %>% unique()
RoB <- df %>% dyplyr::select(StudyId, Authors, Year) %>% unique()
RoB <- df %>% dplyr::select(StudyId, Authors, Year) %>% unique()
RoB <- df %>% dplyr::select(StudyId, Authors, Year) %>% unique()
#define LSR
LSR <- 'LSR3'
# define date of processing
DoP <- Sys.Date()
# All function needed to run this notebook (analyses, etc.) should be in a util.R file
source("util_u2/util.R")
# obtain the data and prepare them for analysis - all data cleaning routines should be in this .R script
source("wrangling_u2/wrangling_functions.R", local = TRUE)
source("wrangling_u2/data_wrangle_script.R")
rlang::last_trace()
source("wrangling_u2/wrangling_functions.R", local = TRUE)
source("wrangling_u2/data_wrangle_script.R")
#Round off results to two digits
options(scipen=100, digits=3)
# Import data
file2load <- paste0(LSR,'_clean_data_',DoP,'.csv')
df <- read_csv(file2load)
# Retrieve article metadata omitted from 'clean_data.csv' and join
article_metadata <- df %>%
select(StudyId, Title, Year) %>%
distinct()
prisma_data <- read_csv("data_u2/LSR3_prisma_180325.csv")
dfp <- PRISMA_data(prisma_data)
PRISMA_flowdiagram(dfp, interactive=FALSE, previous=TRUE, other=FALSE,
detail_databases=FALSE, detail_registers=FALSE, fontsize=12, font="Helvetica",
title_colour="Goldenrod1", greybox_colour="Gainsboro", main_colour="Black",
arrow_colour="Black", arrow_head="normal", arrow_tail="none", side_boxes=TRUE )
RoB <- df %>% dplyr::select(StudyId, Authors, Year) %>% unique()
#change studyId to Author, year
RoB$Study <- RoB$StudyId
RoB$StudyId <- toupper(paste0(str_extract(RoB$Authors,"\\b\\w+\\b"),', ',RoB$Year))
# fix >1 publication per first author in a year
# Assuming your data frame is named RoB and the column is named StudyId
unique_study_ids <- unique(RoB$StudyId)
suffix_list <- character(length = nrow(RoB))
for (study_id in unique_study_ids) {
indices <- RoB$StudyId == study_id
if (sum(indices) > 1) {
suffix_list[indices] <- letters[seq_along(suffix_list[indices])]
}
}
RoB$suffix <- suffix_list
# Add the suffix to the original column
RoB$StudyId <- paste(RoB$StudyId, RoB$suffix, sep = "")
# Remove the 'suffix' column if you no longer need it
RoB <- select(RoB, -suffix)
RoB <- RoB[order(RoB$StudyId),]
RoB <- RoB[,c(5,2,3,1)]
View(RoB)
RoB <- RoB[,c(4,2,3,1)]
colnames(RoB) <- c('Study', 'Authors', 'Year', 'StudyId')
colnamesdf <- c('StudyId', 'Authors','Year','Strain', 'CategoryDiseaseInduction', 'DrugLabel_I', 'DrugLabel_C', 'OutcomeType',
'NumberOfAnimals', 'NumberOfAnimals_C', 'NumberOfAnimals_I', 'SortLabel')
df3 <- df[,colnamesdf]
df3$N <- as.numeric(df3$NumberOfAnimals_C) + as.numeric(df3$NumberOfAnimals_I)
df3 <- subset(df3, !df3$SortLabel=='AvC')
df3 <- df3 %>%
mutate(DrugLabel_C = ifelse(is.na(DrugLabel_C), 'Vehicle', DrugLabel_C))
df3$CompLable <- paste0(df3$DrugLabel_I,' v ',df3$DrugLabel_C)
trow <- merge(df3, RoB, by = 'StudyId')
tab1 <- trow[,c(15,5,4,14,8,13)]
tab2 <- tab1 %>%
group_by(Study, CategoryDiseaseInduction, Strain, CompLable, OutcomeType) %>%
summarise(subjects_sum = sum(N))
colnames(tab2) <- c("Study", "Model", "Strain", "Comparison", "Outcome","N")
tab2 <- tab2 %>%
arrange(Study, Model, Strain, Comparison, Outcome)
write.csv(tab2, 'tab2.csv')
tab2 <- read_csv("data_u2/tab_formatted.csv")
tab2[is.na(tab2)] <- ""
tab2$N <- as.numeric(tab2$N)
original_data <- tab2[1:63, 1:6]
# Rows to have bold lines beneath
rows_with_bold_lines <- c(0,2,3,7,8,9,11,12,13,19,23,26,27,35,37,44,45,46,47,52,53,55,63)
rows_with_bold_lines <- rows_with_bold_lines + 1
# Generate HTML table with adjusted styles
cat('<div style="text-align: center;">')
cat('<table style="width: 100%; border-collapse: collapse;">')
# Table header
cat('<tr style="border-bottom: 2px solid black;">')
for (col_name in names(original_data)) {
cat(paste('<th style="padding: 8px; text-align: center;">', col_name, '</th>', sep = ''))
}
cat('</tr>')
# Table rows
for (i in seq_len(nrow(original_data))) {
cat('<tr>')
for (j in seq_len(ncol(original_data))) {
cell_content <- original_data[i, j]
cell_style <- ifelse(i %in% rows_with_bold_lines, 'border-bottom: 2px solid black; padding: 8px; text-align: center;', 'border-bottom: 1px solid black; padding: 8px; text-align: center;')
if (j == 1) {
cell_style <- gsub('text-align: center;', 'text-align: left;', cell_style)
}
cat(paste('<td style="', cell_style, '">', cell_content, '</td>', sep = ''))
}
cat('</tr>')
}
# Bottom border for the last row
cat('<tr style="border-top: 1px solid black;">')
for (j in seq_len(ncol(original_data))) {
cell_content <- original_data[nrow(original_data), j]
cell_style <- ifelse(nrow(original_data) %in% rows_with_bold_lines, 'border-bottom: 2px solid black; padding: 8px; text-align: center;', 'border-bottom: 2px solid black; padding: 8px; text-align: center;')
if (j == 1) {
cell_style <- gsub('text-align: center;', 'text-align: left;', cell_style)
}
cat(paste('<td style="', cell_style, '">', cell_content, '</td>', sep = ''))
}
cat('</tr>')
cat('</table>')
cat('</div>')
df_S <- filter(df, SortLabel == "TvC")
df_S_LMA <- filter_experiment_outcome_type(df, "TvC", "Locomotor activity")
df_S_PPI <- filter_experiment_outcome_type(df, "TvC", "Prepulse inhibition")
df_S_cog <- filter_experiment_outcome_type(df, "TvC", "Cognition")
df_S_social <- filter_experiment_outcome_type(df, "TvC", "Social interaction")
df_S_stereo <- filter_experiment_outcome_type(df, "TvC", "Stereotypy")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
RoB <- unique(df[,c(4,6,12,25:58)])
#change studyId to Author, year
RoB$StudyId <- toupper(paste0(str_extract(RoB$Authors,"\\b\\w+\\b"),', ',RoB$Year))
View(RoB)
View(RoB)
names(df)
RoB <- unique(df[,c(75,77, 83, 97:106)])
#change studyId to Author, year
RoB$StudyId <- toupper(paste0(str_extract(RoB$Authors,"\\b\\w+\\b"),', ',RoB$Year))
# Assuming your data frame is named RoB and the column is named StudyId
unique_study_ids <- unique(RoB$StudyId)
suffix_list <- character(length = nrow(RoB))
for (study_id in unique_study_ids) {
indices <- RoB$StudyId == study_id
if (sum(indices) > 1) {
suffix_list[indices] <- letters[seq_along(suffix_list[indices])]
}
}
RoB$suffix <- suffix_list
# Add the suffix to the original column
RoB$StudyId <- paste(RoB$StudyId, RoB$suffix, sep = "")
# Remove the 'suffix' column if you no longer need it
RoB <- select(RoB, -suffix)
RoB <- RoB[order(RoB$StudyId),]
#extract Syrcle RoB scores
SyRCLE <- RoB[,c(1,5:14)]
View(RoB)
#extract Syrcle RoB scores
SyRCLE <- RoB[,c(1,4:13)]
#Change "yes' to 'low' and 'No' to 'high'
SyRCLE <- mutate_all(SyRCLE, list(~ ifelse(. == 'Yes', 'Low', .)))
SyRCLE <- mutate_all(SyRCLE, list(~ ifelse(. == 'No', 'High', .)))
colnames(SyRCLE) <- c('Study ID','Allocation sequence','Baseline similarity','Concealment of allocation sequence','Random housing','Caregivers blinded','Random selection for outcome assessment','Blinded outcome assessor','Incomplete data reporting addressed','Free from selective outcome reporting','Free of other risks of bias')
RoB_summary <- rob_summary(data <- SyRCLE, tool = "Generic", weighted = FALSE, overall = FALSE)
return(RoB_summary)
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
source("~/Documents/CAMARADES_postdoc/Research/GALENOS/LSR_repositories/LSR3_taar1_A/util_u2/util.R")
SyRCLE_RoB_traffic(df, "TvC", "Locomotor activity")
RoB <- unique(df[,c(75, 77, 83, 97:106)])
#change studyId to Author, year
RoB$StudyId <- toupper(paste0(str_extract(RoB$Authors,"\\b\\w+\\b"),', ',RoB$Year))
# Assuming your data frame is named RoB and the column is named StudyId
unique_study_ids <- unique(RoB$StudyId)
suffix_list <- character(length = nrow(RoB))
for (study_id in unique_study_ids) {
indices <- RoB$StudyId == study_id
if (sum(indices) > 1) {
suffix_list[indices] <- letters[seq_along(suffix_list[indices])]
}
}
RoB$suffix <- suffix_list
# Add the suffix to the original column
RoB$StudyId <- paste(RoB$StudyId, RoB$suffix, sep = "")
# Remove the 'suffix' column if you no longer need it
RoB <- select(RoB, -suffix)
RoB <- RoB[order(RoB$StudyId),]
#extract Syrcle RoB scores
SyRCLE <- RoB[,c(1, 4:13)]
View(SyRCLE)
#Change "yes' to 'low' and 'No' to 'high'
SyRCLE <- mutate_all(SyRCLE, list(~ ifelse(. == 'Yes', 'Low', .)))
SyRCLE <- mutate_all(SyRCLE, list(~ ifelse(. == 'No', 'High', .)))
colnames(SyRCLE) <- c('Study','Allocation sequence','Baseline similarity','Concealment of allocation sequence','Random housing','Caregivers blinded','Random selection for outcome assessment','Blinded outcome assessor','Incomplete data reporting addressed','Free from selective outcome reporting','Free of other risks of bias')
RoB_TL <- rob_traffic_light(data = SyRCLE, tool = "Generic", psize = 6)
